sum <- sum + 1
}
return(sum)
}
# if sum of non-aces <= 9, need to check count of aces.
# If > 1 one can be treated as 11 while other must be treated as 1
if (sum <= 9 & length(ace_locs) > 1) {
sum <- sum + 11
for (i in 1:(length(ace_locs) - 1)) {
sum <- sum + 1
}
return(sum)
}
# if sum of non-aces == 10, need to check count of aces.
# if == 1, then add 11 to sum and exit. if > 1, treat all aces as 1's
if (sum == 10 & length(ace_locs) == 1) {
sum <- sum + 11
return(sum)
} else {
for (i in 1:length(ace_locs)) {
sum <- sum + 1
}
return(sum)
}
}
player_h <- function(p_hand, cards, i, p_stand){
ncards <- length(cards)
stand <- FALSE
while (stand != TRUE) {
# sum current hand
current <- sum_cards(p_hand)
# if card index == number of cards in decks, time to stop
if (i == ncards) {
stand <- TRUE
# else if hand is < p_stand value, take another card
} else if (current < p_stand) {
i <- i + 1
p_hand <- c(p_hand, cards[i])
} else {
stand <- TRUE
}
} # end while stand != TRUE
return(c(current, i))
}
dealer_h <- function(d_hand, cards, i){
ncards <- length(cards)
stand <- FALSE
while (stand != TRUE) {
# sum current hand
current <- sum_cards(d_hand)
# if card index == number of cards in decks, time to stop
if (i == ncards) {
stand <- TRUE
# else if hand is <= 16, take another card
} else if (current <= 16) {
i <- i + 1
d_hand <- c(d_hand, cards[i])
} else {
stand <- TRUE
}
} # end while stand != TRUE
return(c(current, i))
}
play_bj <- function(cards, bet, p_stand){
# initialize the number of cards to be played
ncards <- length(cards)
# initialize index for cards
i <- 0
# initialize winnings accummulator
winnings <- 0
# now loop until all cards used
while (i < ncards) {
# New hand needed: check to see whether at least 4 cards remain unused
if (i <= (ncards - 4)) {
#### Deal 2 cards to player
# increment card index
i <- i + 2
p_hand <- c(cards[i-1], cards[i])
### Deal 2 cards to dealer
# increment card index
i <- i + 2
d_hand <- c(cards[i-1], cards[i])
} else {
# else cards are exhausted so exit
return(winnings)
}
#### logic for player's hand
p_res <- player_h(p_hand, cards, i, p_stand)
# update card index
i <- p_res[2]
# if player didn't go over 21 then apply dealer hand logic
if (p_res[1] <= 21) {
d_res <- dealer_h(d_hand, cards, i)
# update card index
i <- d_res[2]
}
# ---------------------------------------------------------------
# now compare player's hand to dealer's hand to find out who won
# if player hand exceeded 21 subtract 2 from winnings
if (p_res[1] > 21) {
winnings <- winnings - 2
# else if dealer went over 21 dealer has lost so add 2 to winnings
} else if (d_res[1] > 21) {
winnings <- winnings + 2
# else if player hand > dealer hand add 2 to winnings
} else if (p_res[1] > d_res[1]) {
winnings <- winnings + 2
# else if player hand < dealer hand subtract 2 from winnings
} else if (p_res[1] < d_res[1]) {
winnings <- winnings - 2
}
} # end while (i < ncards)
return(winnings)
}
set.seed(123)
# set number of 2-deck sets to play
N <- 12
# set size of bets
bet <- 2
# set hand total for player to stand at
p_stand <- 16
# generate a deck of cards
deck <- rep(c(2:10, 10, 10, 10, 11), 4)
# create a 2 deck set of cards
two_d <- rep(deck,2)
# create a vector to store results of play
res <- data.frame(N = 1:12, winnings = numeric(N))
for (i in 1:N){
# shuffle 2 new decks of cards
s_decks <-sample(two_d,length(two_d), replace = FALSE)
s_decks
# play until 2 decks are exhausted
res$winnings[i] <- play_bj(s_decks, bet, p_stand)
}
# create a table of winnings for each iteration
iteration <- 1:N
kable(data.frame(iteration, res$winnings))
# average the winnings and print to screen
avg_winnings <- mean(res$winnings)
message(paste("Average Winnings per Hand = ", avg_winnings))
iters <- 1000
# create a vector to store results of play
res2 <- data.frame(N = 1:iters, avg_winnings = numeric(iters))
for (k in 1:iters) {
for (i in 1:N){
# shuffle 2 new decks of cards
s_decks <-sample(two_d,length(two_d), replace = FALSE)
s_decks
# play until 2 decks are exhausted
res$winnings[i] <- play_bj(s_decks, bet, p_stand)
} # for i
# save the average the winnings to the results vector
res2$avg_winnings[k] <- mean(res$winnings)
} # for k
summary(res2$avg_winnings)
times <- c(1.88, 0.54, 1.90, 0.15, 0.02,
2.81, 1.50, 0.53, 2.62, 2.67,
3.53, 0.53, 1.80, 0.79, 0.21,
0.80, 0.26, 0.63, 0.36, 2.03,
1.42, 1.28, 0.82, 2.16, 0.05,
0.04, 1.49, 0.66, 2.03, 1.00,
0.39, 0.34, 0.01, 0.10, 1.10,
0.24, 0.26, 0.45, 0.17, 4.29,
0.80, 5.50, 4.91, 0.35, 0.36,
0.90, 1.03, 1.73, 0.38, 0.48)
(lmbda <- 1/mean(times))
k <- 6
p <- 1/k
# initialize vector to store values of endpoints
endpoints <- numeric(k + 1)
# find each endpoint's value
for (i in 0:k) {
endpoints[i+1] <- round( (-1/lmbda) * log(1 - (i * p)), 2)
}
# add the maximum value as the upper bound for the intervals
endpoints[k+1] <- max(times)
endpoints
h1 <- hist(times, breaks = endpoints, xlim = c(0,6), xlab = "Intervals", main = "Histogram of Service Times", probability = TRUE, yaxt='n', col = "yellow")
h1$counts
library(knitr)
setwd("c:/users/hammer/Documents/github/Sim_Project")
source("single_sim.R")
free_inches <- seq(3, 6, 0.5)
df_dim <- length(free_inches)
# create data frame to store results of separate simulations for different free shelf space values
res_master <- data.frame(Inches = free_inches, mu = numeric(df_dim), mdn = numeric(df_dim),
min = numeric(df_dim), max = numeric(df_dim), sd = numeric(df_dim),
c_int = character(df_dim))
# create data frame to store count of books moved to offsite storage
os_master <- data.frame(Inches = free_inches, mu = numeric(df_dim), mdn = numeric(df_dim),
min = numeric(df_dim), max = numeric(df_dim), sd = numeric(df_dim),
c_int = character(df_dim) )
sim_results = numeric(100)
del_bks = numeric(100)
# for each item in the free shelf space sequence, run the full simulation
# and collect results
df_ind <- 1
# create a data frame to store all simulation results for use outside of the for loop
bxp_df <- data.frame(matrix(, nrow=100, ncol=0))
delbks_df <- data.frame(matrix(, nrow=100, ncol=0))
k = 3
res_list <- single_sim(sfree_space = k)
sim_results[i] <- res_list$iters
del_bks[i] <- res_list$delbks
sim_results = numeric(100)
del_bks = numeric(100)
for(i in 1:100){
res_list <- single_sim(sfree_space = k)
sim_results[i] <- res_list$iters
del_bks[i] <- res_list$delbks
}
bxp_df <- cbind(bxp_df, sim_results)
# set the name of the new col to the number of inches of free space
colnames(bxp_df)[colnames(bxp_df) == 'sim_results'] <- toString(k)
# add col containing del_bks to deleted books dataframe
delbks_df <- cbind(delbks_df, del_bks)
# set the name of the new col to the number of inches of free space
colnames(delbks_df)[colnames(delbks_df) == 'del_bks'] <- toString(k)
View(bxp_df)
View(delbks_df)
res_master$mu[df_ind] <- mean(sim_results)
res_master$mdn[df_ind] <- median(sim_results)
res_master$min[df_ind] <- min(sim_results)
res_master$max[df_ind] <- max(sim_results)
res_master$sd[df_ind] <- sd(sim_results)
SE <- sd(sim_results) / sqrt(100)
lowerB <- mean(sim_results) - 1.96 * SE
upperB <- mean(sim_results) + 1.96 * SE
res_master$c_int[df_ind] <- c(lowerB, upperB)
c(lowerB, upperB)
sprintf("(%2.2f, $2.2f)", lowerB, upperB)
sprintf("(%2.2f, %2.2f)", lowerB, upperB)
sprintf("(%2.3f, %2.3f)", lowerB, upperB)
res_master$c_int[df_ind] <- sprintf("(%2.3f, %2.3f)", lowerB, upperB)
res_master$c_int[df_ind] <- character(sprintf("(%2.3f, %2.3f)", lowerB, upperB))
character(sprintf("(%2.3f, %2.3f)", lowerB, upperB))
toString(sprintf("(%2.3f, %2.3f)", lowerB, upperB))
res_master$c_int[df_ind] <- toString(sprintf("(%2.3f, %2.3f)", lowerB, upperB))
res_master <- data.frame(Inches = free_inches, mu = numeric(df_dim), mdn = numeric(df_dim),
min = numeric(df_dim), max = numeric(df_dim), sd = numeric(df_dim),
c_int = character(df_dim), stringsAsFactors = FALSE)
# create data frame to store count of books moved to offsite storage
os_master <- data.frame(Inches = free_inches, mu = numeric(df_dim), mdn = numeric(df_dim),
min = numeric(df_dim), max = numeric(df_dim), sd = numeric(df_dim),
c_int = character(df_dim), stringsAsFactors = FALSE )
res_master$mu[df_ind] <- mean(sim_results)
res_master$mdn[df_ind] <- median(sim_results)
res_master$min[df_ind] <- min(sim_results)
res_master$max[df_ind] <- max(sim_results)
res_master$sd[df_ind] <- sd(sim_results)
# calculate 95% confidence interval: First we need SE = sd/sqrt(N)
SE <- sd(sim_results) / sqrt(100)
lowerB <- mean(sim_results) - 1.96 * SE
upperB <- mean(sim_results) + 1.96 * SE
res_master$c_int[df_ind] <- toString(sprintf("(%2.3f, %2.3f)", lowerB, upperB))
View(res_master)
os_master$mu[df_ind] <- mean(del_bks)
os_master$mdn[df_ind] <- median(del_bks)
os_master$min[df_ind] <- min(del_bks)
os_master$max[df_ind] <- max(del_bks)
os_master$sd[df_ind] <- sd(del_bks)
# calculate 95% confidence interval: First we need SE = sd/sqrt(N)
SE <- sd(del_bks) / sqrt(100)
lowerB <- mean(del_bks) - 1.96 * SE
upperB <- mean(del_bks) + 1.96 * SE
os_master$c_int[df_ind] <- toString(sprintf("(%2.3f, %2.3f)", lowerB, upperB))
View(os_master)
df_ind <- df_ind + 1
k = 3.5
for(i in 1:100){
res_list <- single_sim(sfree_space = k)
sim_results[i] <- res_list$iters
del_bks[i] <- res_list$delbks
}
bxp_df <- cbind(bxp_df, sim_results)
# set the name of the new col to the number of inches of free space
colnames(bxp_df)[colnames(bxp_df) == 'sim_results'] <- toString(k)
# add col containing del_bks to deleted books dataframe
delbks_df <- cbind(delbks_df, del_bks)
# set the name of the new col to the number of inches of free space
colnames(delbks_df)[colnames(delbks_df) == 'del_bks'] <- toString(k)
res_master$mu[df_ind] <- mean(sim_results)
res_master$mdn[df_ind] <- median(sim_results)
res_master$min[df_ind] <- min(sim_results)
res_master$max[df_ind] <- max(sim_results)
res_master$sd[df_ind] <- sd(sim_results)
# calculate 95% confidence interval: First we need SE = sd/sqrt(N)
SE <- sd(sim_results) / sqrt(100)
lowerB <- mean(sim_results) - 1.96 * SE
upperB <- mean(sim_results) + 1.96 * SE
res_master$c_int[df_ind] <- toString(sprintf("(%2.3f, %2.3f)", lowerB, upperB))
# store iteration results in master results data frame
os_master$mu[df_ind] <- mean(del_bks)
os_master$mdn[df_ind] <- median(del_bks)
os_master$min[df_ind] <- min(del_bks)
os_master$max[df_ind] <- max(del_bks)
os_master$sd[df_ind] <- sd(del_bks)
# calculate 95% confidence interval: First we need SE = sd/sqrt(N)
SE <- sd(del_bks) / sqrt(100)
lowerB <- mean(del_bks) - 1.96 * SE
upperB <- mean(del_bks) + 1.96 * SE
os_master$c_int[df_ind] <- toString(sprintf("(%2.3f, %2.3f)", lowerB, upperB))
df_ind <- df_ind + 1
View(os_master)
View(res_master)
k = 4
for(i in 1:100){
res_list <- single_sim(sfree_space = k)
sim_results[i] <- res_list$iters
del_bks[i] <- res_list$delbks
}
bxp_df <- cbind(bxp_df, sim_results)
# set the name of the new col to the number of inches of free space
colnames(bxp_df)[colnames(bxp_df) == 'sim_results'] <- toString(k)
# add col containing del_bks to deleted books dataframe
delbks_df <- cbind(delbks_df, del_bks)
# set the name of the new col to the number of inches of free space
colnames(delbks_df)[colnames(delbks_df) == 'del_bks'] <- toString(k)
res_master$mu[df_ind] <- mean(sim_results)
res_master$mdn[df_ind] <- median(sim_results)
res_master$min[df_ind] <- min(sim_results)
res_master$max[df_ind] <- max(sim_results)
res_master$sd[df_ind] <- sd(sim_results)
# calculate 95% confidence interval: First we need SE = sd/sqrt(N)
SE <- sd(sim_results) / sqrt(100)
lowerB <- mean(sim_results) - 1.96 * SE
upperB <- mean(sim_results) + 1.96 * SE
res_master$c_int[df_ind] <- toString(sprintf("(%2.3f, %2.3f)", lowerB, upperB))
# store iteration results in master results data frame
os_master$mu[df_ind] <- mean(del_bks)
os_master$mdn[df_ind] <- median(del_bks)
os_master$min[df_ind] <- min(del_bks)
os_master$max[df_ind] <- max(del_bks)
os_master$sd[df_ind] <- sd(del_bks)
# calculate 95% confidence interval: First we need SE = sd/sqrt(N)
SE <- sd(del_bks) / sqrt(100)
lowerB <- mean(del_bks) - 1.96 * SE
upperB <- mean(del_bks) + 1.96 * SE
os_master$c_int[df_ind] <- toString(sprintf("(%2.3f, %2.3f)", lowerB, upperB))
df_ind <- df_ind + 1
View(res_master)
k = 4.5
for(i in 1:100){
res_list <- single_sim(sfree_space = k)
sim_results[i] <- res_list$iters
del_bks[i] <- res_list$delbks
}
bxp_df <- cbind(bxp_df, sim_results)
# set the name of the new col to the number of inches of free space
colnames(bxp_df)[colnames(bxp_df) == 'sim_results'] <- toString(k)
# add col containing del_bks to deleted books dataframe
delbks_df <- cbind(delbks_df, del_bks)
# set the name of the new col to the number of inches of free space
colnames(delbks_df)[colnames(delbks_df) == 'del_bks'] <- toString(k)
res_master$mu[df_ind] <- mean(sim_results)
res_master$mdn[df_ind] <- median(sim_results)
res_master$min[df_ind] <- min(sim_results)
res_master$max[df_ind] <- max(sim_results)
res_master$sd[df_ind] <- sd(sim_results)
# calculate 95% confidence interval: First we need SE = sd/sqrt(N)
SE <- sd(sim_results) / sqrt(100)
lowerB <- mean(sim_results) - 1.96 * SE
upperB <- mean(sim_results) + 1.96 * SE
res_master$c_int[df_ind] <- toString(sprintf("(%2.3f, %2.3f)", lowerB, upperB))
# store iteration results in master results data frame
os_master$mu[df_ind] <- mean(del_bks)
os_master$mdn[df_ind] <- median(del_bks)
os_master$min[df_ind] <- min(del_bks)
os_master$max[df_ind] <- max(del_bks)
os_master$sd[df_ind] <- sd(del_bks)
# calculate 95% confidence interval: First we need SE = sd/sqrt(N)
SE <- sd(del_bks) / sqrt(100)
lowerB <- mean(del_bks) - 1.96 * SE
upperB <- mean(del_bks) + 1.96 * SE
os_master$c_int[df_ind] <- toString(sprintf("(%2.3f, %2.3f)", lowerB, upperB))
df_ind <- df_ind + 1
k = 5
for(i in 1:100){
res_list <- single_sim(sfree_space = k)
sim_results[i] <- res_list$iters
del_bks[i] <- res_list$delbks
}
bxp_df <- cbind(bxp_df, sim_results)
# set the name of the new col to the number of inches of free space
colnames(bxp_df)[colnames(bxp_df) == 'sim_results'] <- toString(k)
# add col containing del_bks to deleted books dataframe
delbks_df <- cbind(delbks_df, del_bks)
# set the name of the new col to the number of inches of free space
colnames(delbks_df)[colnames(delbks_df) == 'del_bks'] <- toString(k)
res_master$mu[df_ind] <- mean(sim_results)
res_master$mdn[df_ind] <- median(sim_results)
res_master$min[df_ind] <- min(sim_results)
res_master$max[df_ind] <- max(sim_results)
res_master$sd[df_ind] <- sd(sim_results)
# calculate 95% confidence interval: First we need SE = sd/sqrt(N)
SE <- sd(sim_results) / sqrt(100)
lowerB <- mean(sim_results) - 1.96 * SE
upperB <- mean(sim_results) + 1.96 * SE
res_master$c_int[df_ind] <- toString(sprintf("(%2.3f, %2.3f)", lowerB, upperB))
# store iteration results in master results data frame
os_master$mu[df_ind] <- mean(del_bks)
os_master$mdn[df_ind] <- median(del_bks)
os_master$min[df_ind] <- min(del_bks)
os_master$max[df_ind] <- max(del_bks)
os_master$sd[df_ind] <- sd(del_bks)
# calculate 95% confidence interval: First we need SE = sd/sqrt(N)
SE <- sd(del_bks) / sqrt(100)
lowerB <- mean(del_bks) - 1.96 * SE
upperB <- mean(del_bks) + 1.96 * SE
os_master$c_int[df_ind] <- toString(sprintf("(%2.3f, %2.3f)", lowerB, upperB))
df_ind <- df_ind + 1
k = 5.5
for(i in 1:100){
res_list <- single_sim(sfree_space = k)
sim_results[i] <- res_list$iters
del_bks[i] <- res_list$delbks
}
bxp_df <- cbind(bxp_df, sim_results)
# set the name of the new col to the number of inches of free space
colnames(bxp_df)[colnames(bxp_df) == 'sim_results'] <- toString(k)
# add col containing del_bks to deleted books dataframe
delbks_df <- cbind(delbks_df, del_bks)
# set the name of the new col to the number of inches of free space
colnames(delbks_df)[colnames(delbks_df) == 'del_bks'] <- toString(k)
res_master$mu[df_ind] <- mean(sim_results)
res_master$mdn[df_ind] <- median(sim_results)
res_master$min[df_ind] <- min(sim_results)
res_master$max[df_ind] <- max(sim_results)
res_master$sd[df_ind] <- sd(sim_results)
# calculate 95% confidence interval: First we need SE = sd/sqrt(N)
SE <- sd(sim_results) / sqrt(100)
lowerB <- mean(sim_results) - 1.96 * SE
upperB <- mean(sim_results) + 1.96 * SE
res_master$c_int[df_ind] <- toString(sprintf("(%2.3f, %2.3f)", lowerB, upperB))
# store iteration results in master results data frame
os_master$mu[df_ind] <- mean(del_bks)
os_master$mdn[df_ind] <- median(del_bks)
os_master$min[df_ind] <- min(del_bks)
os_master$max[df_ind] <- max(del_bks)
os_master$sd[df_ind] <- sd(del_bks)
# calculate 95% confidence interval: First we need SE = sd/sqrt(N)
SE <- sd(del_bks) / sqrt(100)
lowerB <- mean(del_bks) - 1.96 * SE
upperB <- mean(del_bks) + 1.96 * SE
os_master$c_int[df_ind] <- toString(sprintf("(%2.3f, %2.3f)", lowerB, upperB))
df_ind <- df_ind + 1
k = 6
for(i in 1:100){
res_list <- single_sim(sfree_space = k)
sim_results[i] <- res_list$iters
del_bks[i] <- res_list$delbks
}
bxp_df <- cbind(bxp_df, sim_results)
# set the name of the new col to the number of inches of free space
colnames(bxp_df)[colnames(bxp_df) == 'sim_results'] <- toString(k)
# add col containing del_bks to deleted books dataframe
delbks_df <- cbind(delbks_df, del_bks)
# set the name of the new col to the number of inches of free space
colnames(delbks_df)[colnames(delbks_df) == 'del_bks'] <- toString(k)
res_master$mu[df_ind] <- mean(sim_results)
res_master$mdn[df_ind] <- median(sim_results)
res_master$min[df_ind] <- min(sim_results)
res_master$max[df_ind] <- max(sim_results)
res_master$sd[df_ind] <- sd(sim_results)
# calculate 95% confidence interval: First we need SE = sd/sqrt(N)
SE <- sd(sim_results) / sqrt(100)
lowerB <- mean(sim_results) - 1.96 * SE
upperB <- mean(sim_results) + 1.96 * SE
res_master$c_int[df_ind] <- toString(sprintf("(%2.3f, %2.3f)", lowerB, upperB))
# store iteration results in master results data frame
os_master$mu[df_ind] <- mean(del_bks)
os_master$mdn[df_ind] <- median(del_bks)
os_master$min[df_ind] <- min(del_bks)
os_master$max[df_ind] <- max(del_bks)
os_master$sd[df_ind] <- sd(del_bks)
# calculate 95% confidence interval: First we need SE = sd/sqrt(N)
SE <- sd(del_bks) / sqrt(100)
lowerB <- mean(del_bks) - 1.96 * SE
upperB <- mean(del_bks) + 1.96 * SE
os_master$c_int[df_ind] <- toString(sprintf("(%2.3f, %2.3f)", lowerB, upperB))
boxplot(bxp_df, caption = "Boxplots of Simulation Results")
boxplot(bxp_df, main = "Boxplots of Simulation Results")
boxplot(bxp_df, main = "Boxplots of Simulation Results", xlab = "Initial Free Shelf Space Value (inches)", ylab = "Number of Iterations Until Shelf Shift")
boxplot(bxp_df, main = "Boxplots of Simulation Results", xlab = "Initial Free Shelf Space Value (inches)", ylab = "# of Iterations Until Shelf Shift Required")
boxplot(bxp_df, main = "Boxplots of Simulation Results", xlab = "Initial Free Shelf Space Value (inches)", ylab = "# of Iterations Until Shelf Shift Required", col = "yellow")
boxplot(bxp_df, main = "Results: # of Iterations until Shelf Shift", xlab = "Initial Free Shelf Space Value (inches)", ylab = "# of Iterations Until Shelf Shift Required", col = "yellow")
plot(os_master$mu, type = "line")
plot(x = os_master$Inches, y = os_master$mu, type = "line", col = "blue", ylab = )
plot(x = os_master$Inches, y = os_master$mu, type = "line", col = "blue", xlab = "Initial Free Shelf Space Value (inches)",  ylab = "# of Books Sent Off Site")
plot(x = os_master$Inches, y = os_master$mu, type = "line", col = "blue", xlab = "Initial Free Shelf Space Value (inches)",  ylab = "Avg. # of Books Sent Off Site", main = "Results: Avg. # of Books Sent Off Site")
boxplot(bxp_df, main = "Results: # of Iterations Until Shelf Shift", xlab = "Initial Free Shelf Space Value (inches)", ylab = "# of Iterations Until Shelf Shift Required", col = "yellow")
kable(res_master, caption = "Number of Iterations Until Shelf Shift Needed")
plot(x = os_master$Inches, y = os_master$mu, type = "line", col = "blue", xlab = "Initial Free Shelf Space Value (inches)",  ylab = "Avg. # of Books Sent Off Site", main = "Results: Avg. # of Books Sent Off Site")
kable(os_master, caption = "Number of Books Sent Off Site")
plot(x = os_master$Inches, y = os_master$mu, type = "line", col = "blue", cex = 2,
xlab = "Initial Free Shelf Space Value (inches)",
ylab = "Avg. # of Books Sent Off Site",
main = "Results: Avg. # of Books Sent Off Site")
plot(x = os_master$Inches, y = os_master$mu, type = "line", col = "blue", cex = 8,
xlab = "Initial Free Shelf Space Value (inches)",
ylab = "Avg. # of Books Sent Off Site",
main = "Results: Avg. # of Books Sent Off Site")
plot(x = os_master$Inches, y = os_master$mu, type = "line", col = "blue", lwd = 2,
xlab = "Initial Free Shelf Space Value (inches)",
ylab = "Avg. # of Books Sent Off Site",
main = "Results: Avg. # of Books Sent Off Site")
plot(x = os_master$Inches, y = os_master$mu, type = "line", col = "blue", lwd = 3,
xlab = "Initial Free Shelf Space Value (inches)",
ylab = "Avg. # of Books Sent Off Site",
main = "Results: Avg. # of Books Sent Off Site")
kable(os_master, caption = "Number of Books Sent Off Site")
kable(os_master, caption = "Number of Books Sent Off Site")
